
let preguntasNi√±o = 0;
let preguntasMIA = 0;
let preguntasHechasPorMIA = [];
const maxPreguntas = 3;
async function cargarVoces() {
    return new Promise((resolve) => {
        let voces = speechSynthesis.getVoices();
        if (voces.length !== 0) {
            resolve();
        } else {
            speechSynthesis.onvoiceschanged = () => resolve();
        }
    });
}

async function iniciarConversacion() {
    
    document.getElementById("btn-iniciar").style.display = "none";
    actualizarVinedaIA("Hola amigos de Grupo REFORMA, yo soy MIA, yo soy parte de una Inteligencia Artificial, yo puedo platicar contigo, me puedes preguntar lo que t√∫ quieras, tambi√©n yo te har√© algunas preguntas, por cierto: ¬øMe puedes decir tu nombre?");
    document.getElementById("robot").src = "/static/images/robot-hablando.png";

    await cargarVoces();
    await hablar(".");
    await hablar("Hola amigos de Grupo REFORMA, yo soy MIA, yo soy parte de una Inteligencia Artificial, yo puedo platicar contigo, me puedes preguntar lo que t√∫ quieras, tambi√©n yo te har√© algunas preguntas, por cierto: ¬øMe puedes decir tu nombre?");
    await escuchar("nombre");
}
async function escuchar(tipo) {
    document.getElementById("robot").src = "/static/images/robot-escuchando.png";

    try {
        const response = await fetch("/escuchar", { method: "POST" });
        const data = await response.json();

        if (!data.mensaje) {
            await hablar("No entend√≠, ¬øpuedes repetirlo?");
            return await escuchar(tipo);
        }

        actualizarVinedaUsuario(data.mensaje);

        if (tipo === "nombre") {
            await fetch("/guardar_dato", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ tipo: "nombre", valor: data.mensaje })
            });
            await hablar(`Mucho gusto, ${data.mensaje}. ¬øCu√°ntos a√±os tienes?`);
            actualizarVinedaIA(`Mucho gusto, ${data.mensaje}. ¬øCu√°ntos a√±os tienes?`);
            await escuchar("edad");
        } else if (tipo === "edad") {
            await fetch("/guardar_dato", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ tipo: "edad", valor: data.mensaje })
            });
            await hablar("Gracias, ahora dime, ¬øcu√°l es tu animal favorito?");
            actualizarVinedaIA("Gracias, ahora dime, ¬øcu√°l es tu animal favorito?");
            await escuchar("animal");
        } else if (tipo === "animal") {
            await fetch("/guardar_dato", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ tipo: "animal", valor: data.mensaje })
            });
            await hablar("Interesante elecci√≥n. Ahora puedes hacerme tres preguntas, Preguntame lo que quieras o cuentame algo.");
            actualizarVinedaIA("Interesante elecci√≥n. Ahora puedes hacerme tres preguntas, Preguntame lo que quieras o cuentame algo");
            await escuchar("pregunta");
        } else if (tipo === "pregunta") {
            preguntasNi√±o++;
            await fetch("/guardar_respuesta_nino", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ respuesta: data.mensaje })
            });
            await obtenerRespuesta(data.mensaje);
        } else if (tipo === "pregunta_mia") {
            preguntasMIA++;
            await fetch("/guardar_respuesta_mia", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ respuesta: data.mensaje })
            });
            if (preguntasMIA < maxPreguntas) {
                await hacerPreguntaMIA();
            } else {
                await preguntarAgregarAlgoMas();
            }
        } else if (tipo === "agregar") {
            await finalizarInteraccion();
        }
    } catch (error) {
        console.error("Error:", error);
        await hablar("Hubo un problema al escuchar, intenta nuevamente.");
        await escuchar(tipo);
    }
}

async function obtenerRespuesta(pregunta) {
    document.getElementById("robot").src = "/static/images/robot-pensando.png";
    try {
        const response = await fetch("/interactuar", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ mensaje: pregunta })
        });
        const data = await response.json();
        if (data.respuesta) {
            actualizarVinedaIA(data.respuesta);
            await hablar(data.respuesta);

            if (preguntasNi√±o < maxPreguntas) {
                // ‚úÖ Intercalar la frase solo despu√©s de la primera y segunda pregunta
                if (preguntasNi√±o === 1 || preguntasNi√±o === 2) {
                    await preguntame_lo_que_quieras();
                }
                await escuchar("pregunta");
            } else {
                await presentacionPreguntasMIA();
            }
        }
    } catch (error) {
        console.error("Error al obtener respuesta:", error);
    }
}

async function iniciarpreguntas() {
    document.getElementById("robot").src = "/static/images/robot-hablando.png";
    await hablar("Ahora yo te har√© tres preguntas");
    await hacerPreguntaMA();
}


async function presentacionPreguntasMIA() {
    const mensaje = "Ahora yo te har√© tres preguntas.";
    actualizarVinedaIA(mensaje);
    await hablar(mensaje);
    await hacerPreguntaMIA(); // Comienza con la primera pregunta
}

async function hacerPreguntaMIA() {
    const listaPreguntas = [
        "¬øC√≥mo te sientes en la escuela o con tus amigos?",
        "¬øPuedes contarme sobre alguna situaci√≥n inc√≥moda que hayas vivido recientemente?",
        "¬øHas notado alg√∫n cambio en c√≥mo te tratan otros ni√±os?",
        "¬øAlguien te ha dicho o hecho algo que te haya lastimado?",
        "¬øTe incluyen o te dejan fuera de actividades?",
        "¬øC√≥mo te llevas con tus compa√±eros de clase?",
        "¬øAlguna vez te han amenazado o te han hecho sentir inseguro?",
        "¬øHas observado comportamientos desagradables o agresivos hacia otros ni√±os?",
        "¬øSientes que te pueden hablar sobre cualquier cosa sin temor a represalias?",
        "¬øHay alg√∫n compa√±ero en tu escuela con quien tengas problemas?",
        "¬øTienes amigos con los que te llevas bien en la escuela?",
        "¬øTe sientes c√≥modo o seguro en tu clase o durante el recreo?",
        "¬øHas escuchado comentarios que te hagan sentir mal o desagradables hacia ti o hacia otros en la escuela?",
        "¬øCon qui√©n juegas en la escuela?",
        "¬øPuedes contarme sobre alguien que sea tu amigo en la escuela?",
        "¬øAlguna vez has visto que alguien le hace da√±o a otro ni√±o?",
        "¬øC√≥mo te sientes cuando llega el momento de ir a la escuela?",
        "¬øPuedes decirme algo que te haya hecho sentir feliz en la escuela? ¬øY algo que te haya hecho sentir triste?",
        "¬øHas notado que alguien se mete contigo o te dice cosas que te hacen sentir mal?",
        "¬øQu√© haces si alguien te trata de manera no amable?",
        "¬øTe han dicho palabras que te hayan hecho sentir triste o enojado?",
        "¬øHas hecho llorar a un ni√±o?",
        "¬øTe han dicho palabras hirientes?",
        "¬øTe han golpeado en la escuela?",
        "¬øAlguna vez te has sentido triste o asustado cuando est√°s con otros ni√±os?"
    ];

    
    let pregunta;
    do {
        pregunta = listaPreguntas[Math.floor(Math.random() * listaPreguntas.length)];
    } while (preguntasHechasPorMIA.includes(pregunta));
    actualizarVinedaIA(pregunta);
    await hablar(pregunta);

    // üü¢ ENV√çA LA PREGUNTA AL BACKEND PARA QUE SE GUARDE
    await fetch("/guardar_pregunta_mia", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ pregunta: pregunta })
    });

    await escuchar("pregunta_mia");
}

async function preguntame_lo_que_quieras() {
    actualizarVinedaIA("Preguntame lo que quieras, o cuentame algo.");
    await hablar("Preguntame lo que quieras, o cuentame algo.");
}

async function preguntarAgregarAlgoMas() {
    actualizarVinedaIA("Muchas gracias por haber platicado conmigo. ¬øQuieres agregar algo m√°s?");
    await hablar("Muchas gracias por haber platicado conmigo. ¬øQuieres agregar algo m√°s?");
    await escuchar("agregar");
}

// Funci√≥n para validar el formato del correo electr√≥nico
function validarEmail(email) {
    const re = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    return re.test(email);
}

async function finalizarInteraccion() {
    document.getElementById("robot").src = "/static/images/robot-pensando.png";
    const response = await fetch("/analizar", { method: "POST" });
    const data = await response.json();
    actualizarVinedaIA(data.resultado);
    await hablar(data.resultado);

    setTimeout(async () => {
        actualizarVinedaIA("Bye Bye, adi√≥s.");
        await hablar("Bye Bye, adi√≥s.");

        // Obtener el correo electr√≥nico ingresado
        const email = document.getElementById("email").value.trim();

        // Validar el correo electr√≥nico
        if (email && validarEmail(email)) {
            // Enviar el correo electr√≥nico con el reporte
            const emailResponse = await fetch('/enviar_reporte', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email: email })
            });
            const emailData = await emailResponse.json();
            if (emailData.status === 'success') {
                console.log('Reporte enviado exitosamente.');
            } else {
                console.error('Error al enviar el reporte:', emailData.message);
            }
        } else {
            console.log('No se enviar√° el reporte por correo electr√≥nico.');
        }

        // Reiniciar la aplicaci√≥n
        await fetch('/reiniciar', { method: 'POST' });
        location.reload();
    }, 3000);
}


async function hablar(mensaje) {
    document.getElementById("robot").src = "/static/images/robot-hablando.png";
    return new Promise((resolve) => {
        const speech = new SpeechSynthesisUtterance(mensaje);
        const voces = speechSynthesis.getVoices();
        speech.voice = voces.find(voice => voice.name.includes("Microsoft Sabina")) || voces.find(v => v.lang.includes("es"));
        speech.rate = 1;
        speech.pitch = 1.5;
        speech.onend = () => {
            document.getElementById("robot").src = "/static/images/robot-pensando.png";
            resolve();
        };
        window.speechSynthesis.speak(speech);
    });
}

function actualizarVinedaIA(texto) {
    document.getElementById("texto-ia").innerText = texto;
}

function actualizarVinedaUsuario(texto) {
    document.getElementById("texto-usuario").innerText = texto;
}
